define("core_sms/smsgatewaytoggle",["exports","core_table/dynamic","core_table/local/dynamic/selectors","core/ajax","core/notification","core/pending","core/str"],(function(_exports,_dynamic,Selectors,_ajax,_notification,_pending,_str){var obj;function _getRequireWildcardCache(nodeInterop){if("function"!=typeof WeakMap)return null;var cacheBabelInterop=new WeakMap,cacheNodeInterop=new WeakMap;return(_getRequireWildcardCache=function(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop})(nodeInterop)}function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule)return obj;if(null===obj||"object"!=typeof obj&&"function"!=typeof obj)return{default:obj};var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj))return cache.get(obj);var newObj={},hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj)if("default"!==key&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;desc&&(desc.get||desc.set)?Object.defineProperty(newObj,key,desc):newObj[key]=obj[key]}return newObj.default=obj,cache&&cache.set(obj,newObj),newObj}Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.default=void 0,Selectors=_interopRequireWildcard(Selectors),_notification=_interopRequireWildcard(_notification),_pending=(obj=_pending)&&obj.__esModule?obj:{default:obj};let watching=!1;
/**
   * SMS gateway status handler.
   *
   * @module     core_sms/smsgatewaytoggle
   * @copyright  2024 Safat Shahin <safat.shahin@moodle.com>
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */return _exports.default=class{constructor(){!function(obj,key,value){key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value}(this,"clickHandlers",[]),this.addClickHandler(this.handleStateToggle),this.registerEventListeners()}static init(){watching||(watching=!0,new this)}addClickHandler(handler){this.clickHandlers.push(handler.bind(this))}registerEventListeners(){document.addEventListener("click",function(e){const tableRoot=this.getTableRoot(e);tableRoot&&this.clickHandlers.forEach((handler=>handler(tableRoot,e)))}.bind(this))}getTableRoot(e){const tableRoot=e.target.closest(Selectors.main.region);return tableRoot||!1}setGatewayState(methodname,gatewayid,enabled){return(0,_ajax.call)([{methodname:methodname,args:{gatewayid:gatewayid,enabled:enabled}}])[0]}async handleStateToggle(tableRoot,e){const stateToggle=e.target.closest('[data-action="togglestate"][data-toggle-method]');if(stateToggle){e.preventDefault();const pendingPromise=new _pending.default("core_table/dynamic:togglestate"),response=await this.setGatewayState(stateToggle.dataset.toggleMethod,parseInt(stateToggle.dataset.gatewayid),"1"!==stateToggle.dataset.state);response.result||(0,_str.getStrings)([{key:response.message,component:"sms"}]).then((_ref=>{let[message]=_ref;return _notification.default.addNotification({message:message,type:response.messageType})})).catch(_notification.default.exception);const[updatedRoot]=await Promise.all([(0,_dynamic.refreshTableContent)(tableRoot),(0,_notification.fetchNotifications)()]);updatedRoot.querySelector('[data-action="togglestate"][data-gatewayid="'.concat(stateToggle.dataset.gatewayid,'"]')).focus(),pendingPromise.resolve()}}},_exports.default}));

//# sourceMappingURL=smsgatewaytoggle.min.js.map