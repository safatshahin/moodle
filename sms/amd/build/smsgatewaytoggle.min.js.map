{"version":3,"file":"smsgatewaytoggle.min.js","sources":["../src/smsgatewaytoggle.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport {refreshTableContent} from 'core_table/dynamic';\nimport * as Selectors from 'core_table/local/dynamic/selectors';\nimport {call as fetchMany} from 'core/ajax';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport {getStrings} from 'core/str';\nimport {fetchNotifications} from 'core/notification';\n\nlet watching = false;\n\n/**\n * SMS gateway status handler.\n *\n * @module     core_sms/smsgatewaytoggle\n * @copyright  2024 Safat Shahin <safat.shahin@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nexport default class {\n    /**\n     * @property {function[]} clickHandlers a list of handlers to call on click.\n     */\n    clickHandlers = [];\n\n    constructor() {\n        this.addClickHandler(this.handleStateToggle);\n        this.registerEventListeners();\n    }\n\n    /**\n     * Initialise an instance of the class.\n     *\n     * This is just a way of making it easier to initialise an instance of the class from PHP.\n     */\n    static init() {\n        if (watching) {\n            return;\n        }\n        watching = true;\n        new this();\n    }\n\n    /**\n     * Add a click handler to the list of handlers.\n     *\n     * @param {Function} handler A handler to call on a click event\n     */\n    addClickHandler(handler) {\n        this.clickHandlers.push(handler.bind(this));\n    }\n\n    /**\n     * Register the event listeners for this instance.\n     */\n    registerEventListeners() {\n        document.addEventListener('click', function(e) {\n            const tableRoot = this.getTableRoot(e);\n\n            if (!tableRoot) {\n                return;\n            }\n\n            this.clickHandlers.forEach((handler) => handler(tableRoot, e));\n        }.bind(this));\n    }\n\n    /**\n     * Get the table root from an event.\n     *\n     * @param {Event} e\n     * @returns {HTMLElement|bool}\n     */\n    getTableRoot(e) {\n        const tableRoot = e.target.closest(Selectors.main.region);\n        if (!tableRoot) {\n            return false;\n        }\n\n        return tableRoot;\n    }\n\n    /**\n     * Set the plugin state (enabled or disabled)\n     *\n     * @param {string} methodname The web service to call\n     * @param {int} gateway The gateway id\n     * @param {int} enabled The state to set\n     * @returns {Promise}\n     */\n    setGatewayState(methodname, gateway, enabled) {\n        return fetchMany([{\n            methodname,\n            args: {\n                gateway,\n                enabled,\n            },\n        }])[0];\n    }\n\n    /**\n     * Handle state toggling.\n     *\n     * @param {HTMLElement} tableRoot\n     * @param {Event} e\n     */\n    async handleStateToggle(tableRoot, e) {\n        const stateToggle = e.target.closest('[data-action=\"togglestate\"][data-toggle-method]');\n        if (stateToggle) {\n            e.preventDefault();\n            const pendingPromise = new Pending('core_table/dynamic:togglestate');\n\n            const response = await this.setGatewayState(\n                stateToggle.dataset.toggleMethod,\n                parseInt(stateToggle.dataset.gatewayid),\n                stateToggle.dataset.state === '1' ? 0 : 1\n            );\n\n            if (!response.result) {\n                getStrings([\n                    {key: response.message, component: 'sms'},\n                ]).then(([message]) =>\n                    // Reset form dirty state on confirmation, re-trigger the event.\n                    Notification.addNotification({\n                        message: message,\n                        type: response.messageType\n                    })\n                ).catch(Notification.exception);\n            }\n\n            const [updatedRoot] = await Promise.all([\n                refreshTableContent(tableRoot),\n                fetchNotifications(),\n            ]);\n\n            // Refocus on the link that as pressed in the first place.\n            updatedRoot.querySelector(`[data-action=\"togglestate\"][data-gatewayid=\"${stateToggle.dataset.gatewayid}\"]`).focus();\n            pendingPromise.resolve();\n        }\n    }\n}\n"],"names":["watching","constructor","addClickHandler","this","handleStateToggle","registerEventListeners","handler","clickHandlers","push","bind","document","addEventListener","e","tableRoot","getTableRoot","forEach","target","closest","Selectors","main","region","setGatewayState","methodname","gateway","enabled","args","stateToggle","preventDefault","pendingPromise","Pending","response","dataset","toggleMethod","parseInt","gatewayid","state","result","key","message","component","then","_ref","Notification","addNotification","type","messageType","catch","exception","updatedRoot","Promise","all","querySelector","focus","resolve"],"mappings":"25CAuBIA,UAAW;;;;;;;mCAeXC,8KAFgB,SAGPC,gBAAgBC,KAAKC,wBACrBC,uCASDL,WAGJA,UAAW,MACPG,MAQRD,gBAAgBI,cACPC,cAAcC,KAAKF,QAAQG,KAAKN,OAMzCE,yBACIK,SAASC,iBAAiB,QAAS,SAASC,SAClCC,UAAYV,KAAKW,aAAaF,GAE/BC,gBAIAN,cAAcQ,SAAST,SAAYA,QAAQO,UAAWD,MAC7DH,KAAKN,OASXW,aAAaF,SACHC,UAAYD,EAAEI,OAAOC,QAAQC,UAAUC,KAAKC,eAC7CP,YACM,EAcfQ,gBAAgBC,WAAYC,QAASC,gBAC1B,cAAU,CAAC,CACdF,WAAAA,WACAG,KAAM,CACFF,QAAAA,QACAC,QAAAA,YAEJ,2BASgBX,UAAWD,SACzBc,YAAcd,EAAEI,OAAOC,QAAQ,sDACjCS,YAAa,CACbd,EAAEe,uBACIC,eAAiB,IAAIC,iBAAQ,kCAE7BC,eAAiB3B,KAAKkB,gBACxBK,YAAYK,QAAQC,aACpBC,SAASP,YAAYK,QAAQG,WACC,MAA9BR,YAAYK,QAAQI,MAAgB,EAAI,GAGvCL,SAASM,4BACC,CACP,CAACC,IAAKP,SAASQ,QAASC,UAAW,SACpCC,MAAKC,WAAEH,qBAENI,sBAAaC,gBAAgB,CACzBL,QAASA,QACTM,KAAMd,SAASe,iBAErBC,MAAMJ,sBAAaK,iBAGlBC,mBAAqBC,QAAQC,IAAI,EACpC,gCAAoBrC,YACpB,wCAIJmC,YAAYG,oEAA6DzB,YAAYK,QAAQG,iBAAekB,QAC5GxB,eAAeyB"}